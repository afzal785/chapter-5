import heapq

def dijkstra(edges, source, target):
    graph = {}
    for u, v, w in edges:
        if u not in graph:
            graph[u] = []
        graph[u].append((v, w))

    heap = [(0, source)]
    visited = set()

    while heap:
        (cost, node) = heapq.heappop(heap)
        if node in visited:
            continue
        visited.add(node)
        if node == target:
            return cost
        if node in graph:
            for v, w in graph[node]:
                if v not in visited:
                    heapq.heappush(heap, (cost + w, v))

    return float('inf')

# Test Case 1
n = 6
edges = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15), 
         (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source = 0
target = 4
print(dijkstra(edges, source, target))  # Output: 20

# Test Case 2
n = 5
edges = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9), (3, 2, 7), (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source = 0
target = 3
print(dijkstra(edges, source, target))  # Output: 8
