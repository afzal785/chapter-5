def kruskal_mst(n, m, edges):
    def find_parent(parent, i):
        if parent[i] == i:
            return i
        return find_parent(parent, parent[i])

    def union(parent, rank, x, y):
        x_root = find_parent(parent, x)
        y_root = find_parent(parent, y)

        if rank[x_root] < rank[y_root]:
            parent[x_root] = y_root
        elif rank[x_root] > rank[y_root]:
            parent[y_root] = x_root
        else:
            parent[y_root] = x_root
            rank[x_root] += 1

    edges.sort(key=lambda x: x[2])
    parent = [i for i in range(n)]
    rank = [0] * n
    mst = []
    total_weight = 0

    for edge in edges:
        x, y, weight = edge
        x_root = find_parent(parent, x)
        y_root = find_parent(parent, y)

        if x_root != y_root:
            mst.append(edge)
            total_weight += weight
            union(parent, rank, x_root, y_root)

    return mst, total_weight

# Test Case 1
n = 4
m = 5
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
mst_edges, total_weight = kruskal_mst(n, m, edges)
print("Edges in MST:", mst_edges)
print("Total weight of MST:", total_weight)

# Test Case 2
n = 5
m = 7
edges = [(0, 1, 2), (0, 3, 6), (1, 2, 3), (1, 3, 8), (1, 4, 5), (2, 4, 7), (3, 4, 9)]
mst_edges, total_weight = kruskal_mst(n, m, edges)
print("Edges in MST:", mst_edges)
print("Total weight of MST:", total_weight)
