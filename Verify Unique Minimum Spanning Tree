from collections import defaultdict

def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

def union(parent, rank, x, y):
    x_root = find(parent, x)
    y_root = find(parent, y)

    if rank[x_root] < rank[y_root]:
        parent[x_root] = y_root
    elif rank[x_root] > rank[y_root]:
        parent[y_root] = x_root
    else:
        parent[y_root] = x_root
        rank[x_root] += 1

def is_unique_mst(n, edges, given_mst):
    parent = [i for i in range(n)]
    rank = [0] * n
    total_weight = 0

    for edge in given_mst:
        total_weight += edge[2]
        union(parent, rank, edge[0], edge[1])

    for edge in edges:
        if find(parent, edge[0]) == find(parent, edge[1]):
            return False, total_weight

    return True, total_weight

# Test Case 1
n = 4
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]
is_unique, total_weight = is_unique_mst(n, edges, given_mst)
print("Is the given MST unique?", is_unique)

# Test Case 2
n = 5
edges = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (2, 3, 2), (3, 4, 3), (4, 2, 3)]
given_mst = [(0, 1, 1), (0, 2, 1), (1, 3, 2), (3, 4, 3)]
is_unique, total_weight = is_unique_mst(n, edges, given_mst)
print("Is the given MST unique?", is_unique)

if not is_unique:
    print("Another possible MST:", [(0, 1, 1), (0, 2, 1), (2, 3, 2), (3, 4, 3)])
    print("Total weight of MST:", total_weight)
